#!/usr/bin/env python
# coding: utf-8

# In[ ]:


# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sVQIyWEgJcfUUWia201WkoFGopY5P73N
"""

class Addition:
	# first sum for 2 params
	def my_sum(self, a, b):
		return a + b
	
	# second overloaded sum for 3 params
	def my_sum(self, a, b, c):
		return a + b + c
obj = Addition()
obj.my_sum(value1, value2)  # for first func
obj.my_sum(value1, value2, value3)  # for second func
print(obj.my_sum(3, 4))
print(obj.my_sum(3, 4, 5))

from multidispatch import dispatch  # importing the module

@dispatch(int, int)  # using the dispatch decorator to define two parameters as int
def mul(a, b):
    return a * b

@dispatch(int, int, int)  # defining 3 parameters as int
def mul(a, b, c):
    return a * b * c
	
@dispatch(float, float, float)  # defining 3 parameters as float
def mul(a, b, c):
    return a * b * c
print(mul(2.1, 3.4, 5.6))
print(mul(3, 4))
print(mul(2, 3, 4))

class MyClass:
    """"""

    #----------------------------------------------------------------------
    def _init_(self):
        """Constructor"""
    def my_method(self,parameter_A_that_Must_Be_String):
        print parameter_A_that_Must_Be_String

    def my_method(self,parameter_A_that_Must_Be_String,parameter_B_that_Must_Be_String):
        print parameter_A_that_Must_Be_String
        print parameter_B_that_Must_Be_String

    def my_method(self,parameter_A_that_Must_Be_String,parameter_A_that_Must_Be_Int):
        print parameter_A_that_Must_Be_String *

exceptions

# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_J4TGRa4bcaLuFQpLbGVn1IuGAlbNSej
"""

a = [1, 2, 3]
try:
    print ("Second element = ",a[1])
 
    # Throws error since there are only 3 elements in array
    print ("Fourth element = ",a[3])
    
except:
    print ("An error occurred")

print()

b = [3,2,1]
try:
    a == b
except:
    print("They are not equal")
else:
    print("Both Equal") 

print()

try:
    k = 5/0
    print(k)
except ZeroDivisionError:
    print("Can't divide by zero")
finally:
    print('This is always executed')

